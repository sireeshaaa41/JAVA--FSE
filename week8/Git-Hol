1. Understanding .gitignore
The .gitignore file tells Git which files and folders to ignore in your repository.
Ignored files will not be tracked, staged, or committed.
This is useful for:
Temporary files
Logs
Build artifacts
IDE/project-specific files

2. How .gitignore works
You create a file named .gitignore in your repository root.
Inside it, you write patterns of files/folders to ignore.
*.log â†’ ignores all .log files
log/ â†’ ignores the log folder
Patterns are case-sensitive unless you configure Git otherwise.

3. Hands-On Steps
Step 1 â€” Create the .log file and log folder
bash
Copy
Edit
cd your-git-repo-folder
echo "Test log entry" > debug.log
mkdir log
echo "Another log entry" > log/error.log

Step 2 â€” Create/Edit the .gitignore file
bash
Copy
Edit
notepad++ .gitignore
Add:

bash
Copy
Edit
*.log
log/
ðŸ’¡ Meaning:

*.log â†’ Ignore any file ending in .log anywhere in the repo

log/ â†’ Ignore the entire log directory

Step 3 â€” Verify .gitignore effect
bash
Copy
Edit
git status
Expected output:

.log files and log/ directory will not appear as untracked.

If they still appear, it means Git has already tracked them before.
In that case, remove them from the index without deleting from disk:

bash
Copy
Edit
git rm --cached debug.log
git rm --cached -r log
Then check again:

bash
Copy
Edit
git status
Step 4 â€” Commit changes
bash
Copy
Edit
git add .gitignore
git commit -m "Add .gitignore to exclude .log files and log folder"
git push origin main
4. Verify
Run:

bash
Copy
Edit
git status
You should see no .log files or log folder in untracked changes.

Check GitLab/GitHub repo â€” .log files should not be uploaded.

âœ… Outcome:
You now have a .gitignore file that ignores:

Any file ending in .log

Any folder named log


