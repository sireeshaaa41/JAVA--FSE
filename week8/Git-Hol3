Git conflict resolution exercise

# 1. Verify if master is in clean state
git status

# 2. Create a branch “GitWork” and switch to it
git checkout -b GitWork

# Add hello.xml file
echo "<message>Hello from GitWork branch</message>" > hello.xml
git status

# 4. Commit the changes to branch
git add hello.xml
git commit -m "Add hello.xml in GitWork branch"

# 5. Switch to master
git checkout master

# 6. Add hello.xml with DIFFERENT content to master
echo "<message>Hello from master branch</message>" > hello.xml

# 7. Commit changes to master
git add hello.xml
git commit -m "Add hello.xml in master branch"

# 8. Observe the log
git log --oneline --graph --decorate --all

# 9. Check the differences between master and GitWork
git diff GitWork master

# 10. (Optional) Use P4Merge for better visualization (if installed)
git mergetool

# 11. Merge branch into master (this will cause a conflict)
git merge GitWork

# 12. Observe git markup (conflict markers in hello.xml)
cat hello.xml

# 13. Use a merge tool or edit manually to resolve conflict
# Example manual edit:
# Remove <<<<<<<, =======, >>>>>>> markers and keep correct content

# 14. After fixing, mark as resolved
git add hello.xml
git commit -m "Merge GitWork into master and resolve conflict"

# 15. Add backup file (if generated by merge tool) to .gitignore
echo "*.orig" >> .gitignore

# 16. Commit the .gitignore update
git add .gitignore
git commit -m "Ignore merge backup files"

# 17. List all available branches
git branch

# 18. Delete the branch that was merged
git branch -d GitWork

# 19. View final log
git log --oneline --graph --decorate

